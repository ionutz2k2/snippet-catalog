{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n(function () {\n    require('./utils/extensions.js');\n    var state = require('./state');\n\n    var app = Vue.extend({\n        el: function el() {\n            return 'body';\n        },\n\n        components: {\n            'loading-view': require('./components/loading')\n        },\n\n        mixins: [require('./modules/messages-controller')],\n\n        data: function data() {\n            return {\n                state: state,\n                isLoading: false,\n                preventLoading: false,\n                params: {},\n                actions: []\n            };\n        },\n\n        ready: function ready() {\n            this.registerEventListeners();\n            this.showStartPage();\n        },\n\n        methods: {\n            registerEventListeners: function registerEventListeners() {\n                $(document).bind('ajaxSend', (function () {\n                    if (this.preventLoading) {\n                        this.preventLoading = false;\n                        return;\n                    }\n                    this.isLoading = true;\n                }).bind(this)).bind('ajaxStop', (function () {\n                    this.isLoading = false;\n                }).bind(this)).bind('ajaxComplete', (function (e, responseData, settings) {\n                    if (settings.suppressMessages) return;\n\n                    if (responseData.responseJSON !== undefined && responseData.responseJSON.messages !== undefined) {\n                        for (var messageType in responseData.responseJSON.messages) {\n                            for (var messageIndex in responseData.responseJSON.messages[messageType]) {\n                                this.$emit(messageType + '-message', responseData.responseJSON.messages[messageType][messageIndex]);\n                            }\n                        }\n                    }\n                }).bind(this));\n\n                this.$on('error-message', this.showErrorMessage);\n                this.$on('general-message', this.showGeneralMessage);\n                this.$on('warning-message', this.showWarningMessage);\n                this.$on('success-message', this.showSuccessMessage);\n\n                this.$on('buttons-update', (function (buttons) {\n                    this.actions = buttons;\n                }).bind(this));\n            },\n\n            showStartPage: function showStartPage() {\n                router.go('/snippets');\n            }\n        }\n    });\n\n    var router = new VueRouter();\n\n    router.map({\n        '/snippets': {\n            component: require('./pages/snippets-list')\n        },\n        '/snippets/edit/:id': {\n            component: require('./pages/snippet-details'),\n            name: 'snippet-details'\n        },\n        '/snippets/create': {\n            component: require('./pages/snippet-details')\n        }\n    });\n\n    router.start(app, 'body');\n})();\n\n},{\"./components/loading\":2,\"./modules/messages-controller\":7,\"./pages/snippet-details\":8,\"./pages/snippets-list\":10,\"./state\":12,\"./utils/extensions.js\":15}],2:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n    template: require('./loading.template.html')\n};\n\n},{\"./loading.template.html\":3}],3:[function(require,module,exports){\nmodule.exports = '<div class=\"modal-form-container loading\">\\n    <div class=\"modal-background loading-background\">\\n    </div>\\n    <div class=\"container loading-content\">\\n        <div class=\"row\">\\n            <div class=\"col-sm-12\">\\n                <h4 class=\"text-center\"><small>Loading...</small></h4>\\n                <div class=\"progress\">\\n                    <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n';\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar helpers = require('../utils/helpers.js');\n\nmodule.exports = {\n    template: require('./paginatedList.template.html'),\n\n    props: ['params'],\n\n    data: function data() {\n        return {\n            itemsPerPageOptions: [5, 10, 20, 50, 100],\n            visiblePagesCount: 3,\n            listState: {\n                //pagination\n                currentPageIndex: 0,\n                currentStartIndex: 0,\n                itemsPerPage: 10,\n                //search\n                filterText: '',\n                //sort\n                sortByIndex: 0,\n                reverseSort: false\n            },\n            listItemsType: ''\n        };\n    },\n\n    attached: function attached() {\n        this.listItemsType = this.params.type;\n        if (this.params.type == '' || !localStorage[this.params.type]) return;\n\n        this.listState = JSON.parse(localStorage[this.params.type]);\n\n        this.parseData();\n\n        //validate saved list state\n        if (this.listState.currentPageIndex >= this.pagesCount) this.listState.currentPageIndex = this.pagesCount;\n    },\n\n    beforeDestroy: function beforeDestroy() {\n        if (this.params.type == '') return;\n\n        localStorage[this.params.type] = JSON.stringify(this.listState);\n    },\n\n    computed: {\n        pagesCount: function pagesCount() {\n            if (this.listState.itemsPerPage && this.params.data) return Math.ceil(this.filteredData.length / this.listState.itemsPerPage);else return 0;\n        },\n\n        filteredData: function filteredData() {\n            if (!this.params.data) return [];\n\n            return this.$options.filters.filterBy(this.params.data, this.listState.filterText);\n        },\n\n        selectablePagesCount: function selectablePagesCount() {\n            return Math.min(this.visiblePagesCount, this.pagesCount);\n        },\n\n        allSelected: function allSelected() {\n            for (var item in this.params.data) {\n                if (!this.params.data[item].selected) return false;\n            }return true;\n        }\n    },\n\n    methods: {\n        changePage: function changePage(pageIndex) {\n            if (pageIndex != this.listState.currentPageIndex) {\n                var cachePagesCount = this.pagesCount;\n                if (pageIndex < 0) pageIndex = 0;\n                if (pageIndex >= cachePagesCount) pageIndex = cachePagesCount - 1;\n                while (pageIndex >= this.listState.currentStartIndex + this.selectablePagesCount) {\n                    this.listState.currentStartIndex += this.selectablePagesCount;\n                }while (pageIndex < this.listState.currentStartIndex) {\n                    this.listState.currentStartIndex -= this.selectablePagesCount;\n                }if (this.listState.currentStartIndex < 0) this.listState.currentStartIndex = 0;\n                if (this.listState.currentStartIndex + this.selectablePagesCount >= cachePagesCount) this.listState.currentStartIndex = cachePagesCount - this.selectablePagesCount;\n                this.listState.currentPageIndex = pageIndex;\n            }\n        },\n\n        sortBy: function sortBy(columnIndex) {\n            if (this.listState.sortByIndex == columnIndex) this.listState.reverseSort = !this.listState.reverseSort;else {\n                this.listState.reverseSort = false;\n                this.listState.sortByIndex = columnIndex;\n            }\n        },\n\n        itemClick: function itemClick(clickedObject) {\n            this.$dispatch('list-item-click', clickedObject.id);\n        },\n\n        itemChecked: function itemChecked(checkedObject) {\n            event.stopPropagation();\n            if (event.target.type != 'checkbox') checkedObject.selected = !checkedObject.selected;\n        },\n\n        toggleSelectAll: function toggleSelectAll() {\n            var toggleValue = !this.allSelected;\n            for (var item in this.params.data) {\n                this.params.data[item].selected = toggleValue;\n            }\n        },\n\n        parseData: function parseData(data) {\n            if (data === true) data = '<span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>';else if (data === false) data = '';else if (data != undefined) data = helpers.parseForXSS(data);\n\n            return data;\n        }\n    },\n\n    filters: {\n        paginate: function paginate(list) {\n            return list.slice(this.listState.currentPageIndex * this.listState.itemsPerPage, (this.listState.currentPageIndex + 1) * this.listState.itemsPerPage);\n        }\n    }\n};\n\n},{\"../utils/helpers.js\":16,\"./paginatedList.template.html\":5}],5:[function(require,module,exports){\nmodule.exports = '<div class=\"tool-bar\">\\n    <div class=\"container\">\\n        <h3>{{ params.title }}</h3>\\n        <form class=\"form-inline\">\\n            <div class=\"form-group has-feedback\">\\n                <label class=\"sr-only\" for=\"search_input\">Search</label>\\n                <span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\\n                <input type=\"text\" class=\"form-control\" id=\"search_input\" placeholder=\"Search...\" v-model=\"listState.filterText\">\\n                <span id=\"clearSearchText\"\\n                      class=\"glyphicon glyphicon-remove form-control-feedback\"\\n                      aria-hidden=\"true\"\\n                      v-on=\"click: listState.filterText = \\'\\';\"></span>\\n            </div>\\n        </form>\\n        <nav class=\"pagination-nav\" v-if=\"pagesCount > 1\">\\n            <ul class=\"pagination navbar-right\">\\n                <li>\\n                    <a href=\"#\" aria-label=\"Previous\" v-on=\"click: changePage(0)\">\\n                        <span aria-hidden=\"true\">&leftarrow;</span>\\n                    </a>\\n                </li>\\n                <li v-if=\"pagesCount > selectablePagesCount\">\\n                    <a href=\"#\" aria-label=\"Previous\" v-on=\"click: changePage(listState.currentPageIndex - selectablePagesCount)\">\\n                        <span aria-hidden=\"true\">&laquo;</span>\\n                    </a>\\n                </li>\\n                <li v-repeat=\"selectablePagesCount\" v-class=\"active: ($index + listState.currentStartIndex) === listState.currentPageIndex\"><a href=\"#\" v-on=\"click: changePage($index + listState.currentStartIndex)\">{{ $index + listState.currentStartIndex + 1 }}</a></li>\\n                <li v-if=\"pagesCount > selectablePagesCount\">\\n                    <a href=\"#\" aria-label=\"Next\" v-on=\"click: changePage(listState.currentPageIndex + selectablePagesCount)\">\\n                        <span aria-hidden=\"true\">&raquo;</span>\\n                    </a>\\n                </li>\\n                <li>\\n                    <a href=\"#\" aria-label=\"Previous\" v-on=\"click: changePage(pagesCount - 1)\">\\n                        <span aria-hidden=\"true\">&rightarrow;</span>\\n                    </a>\\n                </li>\\n            </ul>\\n            <div class=\"pages-hint\">Page {{ listState.currentPageIndex + 1 }} of {{ pagesCount }}</div>\\n        </nav>\\n        <form class=\"form-inline paginator-config\">\\n            <label for=\"itemsPerPageSelect\">items per page</label>\\n            <select id=\"itemsPerPageSelect\" class=\"form-control\" v-model=\"listState.itemsPerPage\" options=\"itemsPerPageOptions\"></select>\\n        </form>\\n    </div>\\n</div>\\n<div class=\"container paginated-list-container\">\\n    <div class=\"well text-center\" v-if=\"!params.columns || !params.columns.length\">You have no items created yet. Click on the <strong>Create</strong> button to start adding new items.</div>\\n    <div class=\"table-responsive clear\" v-if=\"params.columns && params.columns.length\">\\n        <table class=\"table table-striped table-hover\">\\n            <thead>\\n                <tr>\\n                    <th>\\n                        <input type=\"checkbox\"\\n                               v-model=\"allSelected\"\\n                               v-on=\"click: toggleSelectAll()\">\\n                    </th>\\n                    <th v-repeat=\"column: params.columns\" class=\"text-nowrap\"\\n                        v-on=\"click: sortBy($index)\">\\n                        {{column | columnate | capitalize}}\\n                        <i class=\"fa\"\\n                           v-class=\"fa-sort: $index != listState.sortByIndex,\\n                                    fa-sort-asc: ($index == listState.sortByIndex) && !listState.reverseSort,\\n                                    fa-sort-desc: ($index == listState.sortByIndex) && listState.reverseSort\"></i>\\n                    </th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr v-if=\"params.columns && !filteredData.length\">\\n                    <td colspan=\"{{params.columns.length + 1}}\" class=\"text-center\">No results found.</td>\\n                </tr>\\n                <tr v-repeat=\"entry: params.data | filterBy listState.filterText | orderBy params.columns[listState.sortByIndex] listState.reverseSort | paginate\">\\n                    <td v-on=\"click: itemChecked(entry)\">\\n                        <input type=\"checkbox\"\\n                               v-model=\"entry.selected\"\\n                        >\\n                    </td>\\n                    <td v-repeat=\"column: params.columns\">\\n                        <a v-link=\"{name: \\'snippet-details\\', params: { \\'id\\': entry.id }}\">\\n                            <div>{{{ parseData(entry[column]) }}}</div>\\n                        </a>\\n                    </td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </div>\\n</div>';\n},{}],6:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n    ERROR_MESSAGE: 0,\n    WARNING_MESSAGE: 1,\n    GENERAL_MESSAGE: 2,\n    SUCCESS_MESSAGE: 3\n};\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n/**\r\n * Messages module\r\n *\r\n * Implements functionality for managing a messages queue.\r\n * The queue is constructed so it can easily be used in a bootstrap enabled application\r\n *\r\n */\n\nvar constants = require('../defines');\n\nmodule.exports = {\n    data: function data() {\n        return {\n            messages: []\n        };\n    },\n\n    methods: {\n        showMessage: function showMessage(message, type, time) {\n            if (message === undefined || message.trim() == '') return;\n            time = time === undefined ? 10000 : time;\n\n            var newMessage = {};\n            newMessage.messageText = message;\n            switch (type) {\n                case constants.ERROR_MESSAGE:\n                    newMessage.messageType = { 'alert-danger': true };\n                    break;\n                case constants.WARNING_MESSAGE:\n                    newMessage.messageType = { 'alert-warning': true };\n                    break;\n                case constants.GENERAL_MESSAGE:\n                    newMessage.messageType = { 'alert-info': true };\n                    break;\n                case constants.SUCCESS_MESSAGE:\n                    newMessage.messageType = { 'alert-success': true };\n                    break;\n            }\n            this.messages.push(newMessage);\n            if (time > 0) setTimeout((function () {\n                this.messages.$remove(0);\n            }).bind(this), time);\n        },\n\n        showErrorMessage: function showErrorMessage(message, time) {\n            this.showMessage(message, constants.ERROR_MESSAGE, time);\n        },\n\n        showWarningMessage: function showWarningMessage(message, time) {\n            this.showMessage(message, constants.WARNING_MESSAGE, time);\n        },\n\n        showGeneralMessage: function showGeneralMessage(message, time) {\n            this.showMessage(message, constants.GENERAL_MESSAGE, time);\n        },\n\n        showSuccessMessage: function showSuccessMessage(message, time) {\n            this.showMessage(message, constants.SUCCESS_MESSAGE, time);\n        }\n    }\n};\n\n},{\"../defines\":6}],8:[function(require,module,exports){\n'use strict';\n\nvar ActionButton = require('../utils/button');\nvar RESTWrapper = require('../utils/REST');\nvar state = require('../state');\n\nmodule.exports = {\n    template: require('./snippet-details.template.html'),\n\n    data: function data() {\n        return {\n            resourceData: {\n                id: '',\n                snippet_name: '',\n                snippet_content: '',\n                snippet_written_by: ''\n            },\n            request: null,\n            validation: {\n                snippet_name: true,\n                snippet_content: true,\n                snippet_written_by: true\n            },\n            state: state\n        };\n    },\n\n    computed: {\n        isEditMode: function isEditMode() {\n            return this.$route.path.indexOf('/edit/') > 0;\n        },\n\n        isAddMode: function isAddMode() {\n            return this.$route.path == '/snippets/create';\n        }\n    },\n\n    attached: function attached() {\n        this.request = new RESTWrapper(this, 'api/snippets', this.state.token);\n\n        if (this.isAddMode) {\n            this.initButtons();\n            return;\n        }\n\n        this.resourceData.id = this.$route.params.id;\n        this.request.details(this.resourceData.id, this.init.bind(this));\n    },\n\n    methods: {\n        initButtons: function initButtons() {\n            var actionsList = [];\n            var button;\n\n            if (this.isEditMode) {\n                button = new ActionButton();\n                button.initButton('Save Snippet Details', ['blue', 'left'], this.save);\n                actionsList.push(button);\n            }\n\n            if (this.isAddMode) {\n                button = new ActionButton();\n                button.initButton('Create Snippet', ['blue', 'left'], this.create);\n                actionsList.push(button);\n            }\n\n            button = new ActionButton();\n            button.initButton('Back', ['white', 'right'], this.back);\n            actionsList.push(button);\n\n            this.$dispatch('buttons-update', actionsList);\n        },\n\n        init: function init(responseData) {\n            this.resourceData = responseData.data;\n            this.initButtons();\n        },\n\n        save: function save() {\n            this.request.update(this.resourceData, (function () {\n                this.$dispatch('snippet-saved');\n                this.back();\n            }).bind(this), this.handleValidationErrors);\n        },\n\n        create: function create() {\n            this.request.create(this.resourceData, (function () {\n                this.$dispatch('snippet-created');\n                this.back();\n            }).bind(this), this.handleValidationErrors);\n        },\n\n        handleValidationErrors: function handleValidationErrors(responseData) {\n            try {\n                for (var i in responseData.responseJSON.messages.error) {\n                    if (this.validation[i]) this.validation[i] = false;\n                }\n            } catch (err) {}\n        },\n\n        back: function back() {\n            history.back();\n        }\n    }\n};\n\n},{\"../state\":12,\"../utils/REST\":13,\"../utils/button\":14,\"./snippet-details.template.html\":9}],9:[function(require,module,exports){\nmodule.exports = '<div class=\"container\">\\n    <h3>Employee Details</h3>\\n    <form>\\n        <div class=\"row\">\\n            <!-- Snippet Name Field -->\\n            <div class=\"form-group col-sm-12\"\\n                 v-class=\"has-error: !validation.snippet_name\">\\n                <label class=\"control-label\" for=\"snippet_name\">Snippet Name*</label>\\n                <input type=\"text\" name=\"snippet_name\" id=\"snippet_name\" class=\"form-control\"\\n                       v-model=\"resourceData.snippet_name\"\\n                       v-on=\"keypress: validation.snippet_name = true\"\\n                        />\\n            </div>\\n        </div>\\n\\n        <div class=\"row\">\\n            <!-- Snippet Content Field -->\\n            <div class=\"form-group col-sm-12\"\\n                 v-class=\"has-error: !validation.snippet_content\">\\n                <label class=\"control-label\" for=\"snippet_content\">Snippet Content*</label>\\n                <textarea name=\"snippet_content\" id=\"snippet_content\" class=\"form-control\" rows=\"5\"\\n                          v-model=\"resourceData.snippet_content\"\\n                          v-on=\"keypress: validation.snippet_content = true\"\\n                        ></textarea>\\n            </div>\\n        </div>\\n\\n        <hr />\\n\\n        <div class=\"row\">\\n            <!-- Written By Field -->\\n            <div class=\"form-group col-sm-12\"\\n                 v-class=\"has-error: !validation.snippet_written_by\">\\n                <label class=\"control-label\" for=\"snippet_written_by\">Written By*</label>\\n                <input type=\"text\" name=\"snippet_written_by\" id=\"snippet_written_by\" class=\"form-control\"\\n                       v-model=\"resourceData.snippet_written_by\"\\n                       v-on=\"keypress: validation.snippet_written_by = true\"\\n                        />\\n            </div>\\n        </div>\\n\\n    </form>\\n</div>';\n},{}],10:[function(require,module,exports){\n'use strict';\n\nvar ActionButton = require('../utils/button');\nvar RESTWrapper = require('../utils/REST');\nvar state = require('../state');\n\nmodule.exports = {\n    template: require('./snippets-list.template.html'),\n\n    data: function data() {\n        return {\n            parsedData: {\n                columns: null,\n                data: null,\n                title: 'Snippets List'\n            },\n            state: state,\n            request: null\n        };\n    },\n\n    attached: function attached() {\n        this.request = new RESTWrapper(this, 'api/snippets', this.state.token);\n        this.init();\n    },\n\n    methods: {\n        init: function init() {\n            this.request.getAll(this.initData.bind(this));\n        },\n\n        initButtons: function initButtons() {\n            var actionsList = [];\n            var button;\n\n            button = new ActionButton();\n            button.initButton('Create', ['blue', 'left'], this.add);\n            actionsList.push(button);\n\n            button = new ActionButton();\n            button.initButton('Delete Selected', ['red', 'left'], this.delete);\n            actionsList.push(button);\n\n            this.$dispatch('buttons-update', actionsList);\n        },\n\n        initData: function initData(responseData) {\n            this.parsedData.data = responseData.data;\n            this.parsedData.columns = [];\n            this.initButtons();\n            if (this.parsedData.data.length >= 1) {\n                for (var key in this.parsedData.data[0]) {\n                    this.parsedData.columns.push(key);\n                }for (var item in this.parsedData.data) {\n                    this.parsedData.data[item].$set('selected', false);\n                }\n            }\n        },\n\n        add: function add() {\n            this.$route.router.go('/snippets/create');\n        },\n\n        delete: function _delete() {\n            var selectedIDs = [];\n            for (var item in this.parsedData.data) {\n                if (this.parsedData.data[item].selected) selectedIDs.push(this.parsedData.data[item].id);\n            }if (selectedIDs.length == 0) this.$dispatch('warning-message', 'You haven\\'t selected any items to be deleted. Select the items you want to delete by clicking on the checkbox next to them.');else if (selectedIDs.length > 50) this.$dispatch('warning-message', 'You are not allowed to delete more than 50 items at one time.');else this.request.delete(selectedIDs.join(','), (function () {\n                this.$dispatch('deleted');\n                this.init();\n            }).bind(this));\n        },\n\n        back: function back() {\n            this.$dispatch('back');\n        }\n    },\n\n    components: {\n        'paginated-list': require('../components/paginatedList')\n    }\n};\n\n},{\"../components/paginatedList\":4,\"../state\":12,\"../utils/REST\":13,\"../utils/button\":14,\"./snippets-list.template.html\":11}],11:[function(require,module,exports){\nmodule.exports = '<paginated-list params=\"{{parsedData}}\"></paginated-list>';\n},{}],12:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n    token: ''\n};\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (vueInstance, resourcePath, csrf) {\n    function prepareData(data) {\n        for (var i in data) {\n            if (typeof data[i] == 'boolean') data[i] = data[i] ? 1 : 0;\n        }if (csrf) {\n            if (data instanceof FormData) data.append('_token', csrf);else data._token = csrf;\n        }\n\n        return data;\n    }\n\n    function call(params, successCallback, errorCallback) {\n        $.ajax(params).done(successCallback).fail(errorCallback);\n    }\n\n    /**\r\n     * Fetches the all items\r\n     *\r\n     * @param successCallback\r\n     * @param errorCallback\r\n     */\n    this.getAll = function (successCallback, errorCallback) {\n        var params = {\n            method: 'GET',\n            url: resourcePath\n        };\n        call(params, successCallback, errorCallback);\n    };\n\n    /**\r\n     * Gets all the details for a specific item identified by id\r\n     *\r\n     * @param id\r\n     * @param successCallback\r\n     * @param errorCallback\r\n     */\n    this.details = function (id, successCallback, errorCallback) {\n        var params = {\n            method: 'GET',\n            url: resourcePath + '/' + id\n        };\n        call(params, successCallback, errorCallback);\n    };\n\n    /**\r\n     * Creates a new item based on the object received in the data param\r\n     *\r\n     * @param data\r\n     * @param successCallback\r\n     * @param errorCallback\r\n     * @param options\r\n     */\n    this.create = function (data, successCallback, errorCallback, options) {\n        var params = {\n            method: 'POST',\n            url: resourcePath,\n            data: prepareData(data)\n        };\n        jQuery.extend(params, options);\n        call(params, successCallback, errorCallback);\n    };\n\n    /**\r\n     * Saves the changes of an edited item received as an object in the data param\r\n     *\r\n     * @param data\r\n     * @param successCallback\r\n     * @param errorCallback\r\n     */\n    this.update = function (data, successCallback, errorCallback) {\n        var params = {\n            method: 'PUT',\n            url: resourcePath + '/' + data.id,\n            data: prepareData(data)\n        };\n        call(params, successCallback, errorCallback);\n    };\n\n    /**\r\n     * Deletes one ore more items sent as an object in the data parameter\r\n     * The ids are concatenated in the ids member of the data object\r\n     *\r\n     * @param data\r\n     * @param successCallback\r\n     * @param errorCallback\r\n     */\n    this.delete = function (data, successCallback, errorCallback) {\n        var params = {\n            method: 'DELETE',\n            url: resourcePath + '/' + data,\n            headers: {\n                'X-CSRF-TOKEN': csrf\n            }\n        };\n        call(params, successCallback, errorCallback);\n    };\n};\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n    this.label = '';\n    this.callback = null;\n    this.type = null;\n\n    this.initButton = function (label, aspect, action) {\n        this.label = label;\n        this.callback = action;\n        this.type = {};\n        for (var i = 0; i < aspect.length; i++) {\n            switch (aspect[i]) {\n                case 'blue':\n                    this.type['btn-primary'] = true;\n                    break;\n                case 'red':\n                    this.type['btn-danger'] = true;\n                    break;\n                case 'green':\n                    this.type['btn-success'] = true;\n                    break;\n                case 'light-blue':\n                    this.type['btn-info'] = true;\n                    break;\n                case 'orange':\n                    this.type['btn-warning'] = true;\n                    break;\n                case 'white':\n                    this.type['btn-default'] = true;\n                    break;\n                case 'right':\n                    this.type['btn-right'] = true;\n                    break;\n                case 'left':\n                    this.type['btn-left'] = true;\n                    break;\n            }\n        }\n    };\n};\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\n(function () {\n    String.prototype.ucwords = function () {\n        return this.toLowerCase().replace(/\\b[a-z]/g, function (letter) {\n            return letter.toUpperCase();\n        });\n    };\n})();\n\nVue.filter('columnate', function (value) {\n    return value.replace(/_|-/g, ' ').ucwords();\n});\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nexports.getObjectProperty = function (object, property, defaultValue) {\n    if (object == undefined || object[property] == undefined) return defaultValue;\n    return object[property];\n};\n\nexports.parseForXSS = function (value) {\n    return String(value).replace(/[\\u00A0-\\u9999<>&]/gim, function (i) {\n        return '&#' + i.charCodeAt(0) + ';';\n    });\n};\n\nexports.isValidEmail = function (emailAddress) {\n    var re = /\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b/i;\n    return re.test(emailAddress);\n};\n\n},{}]},{},[1]);\n"],"file":"app.js","sourceRoot":"/source/"}